-- DDL
CREATE DATABASE NutriBalanceDB;

USE NutriBalanceDB;

-- Membuat tabel pengguna
CREATE TABLE pengguna (
    id_pengguna INT AUTO_INCREMENT PRIMARY KEY,
    nama VARCHAR(100) NOT NULL,
    email VARCHAR(100) NOT NULL UNIQUE,
    kata_sandi VARCHAR(100) NOT NULL,
    no_hp VARCHAR(15),
    peran ENUM('Ibu', 'Anak') NOT NULL
);

-- Membuat tabel anak
CREATE TABLE anak (
    id_anak INT AUTO_INCREMENT PRIMARY KEY,
    id_pengguna INT NOT NULL,
    nama_anak VARCHAR(100) NOT NULL,
    usia INT NOT NULL,
    preferensi_makanan TEXT,
    alergi TEXT,
    kebutuhan_khusus TEXT,
    FOREIGN KEY (id_pengguna) REFERENCES pengguna(id_pengguna) ON DELETE CASCADE
);

-- Membuat tabel menu_makanan
CREATE TABLE menu_makanan (
    id_menu INT AUTO_INCREMENT PRIMARY KEY,
    nama_makanan VARCHAR(100) NOT NULL,
    kalori INT NOT NULL,
    kandungan_nutrisi TEXT NOT NULL,
    jenis_makanan ENUM('Sarapan', 'Makan Siang', 'Makan Malam', 'Camilan') NOT NULL
);

-- Membuat tabel rencana_makanan
CREATE TABLE rencana_makanan (
    id_rencana INT AUTO_INCREMENT PRIMARY KEY,
    id_anak INT NOT NULL,
    tanggal DATE NOT NULL,
    waktu_makan ENUM('Sarapan', 'Makan Siang', 'Makan Malam', 'Camilan') NOT NULL,
    id_menu INT NOT NULL,
    catatan TEXT,
    FOREIGN KEY (id_anak) REFERENCES anak(id_anak) ON DELETE CASCADE,
    FOREIGN KEY (id_menu) REFERENCES menu_makanan(id_menu) ON DELETE CASCADE
);

-- DQL
-- Ambil data dari tabel pengguna berdasarkan id
SELECT * FROM pengguna WHERE id_pengguna = 1;

-- Ambil data dari tabel anak berdasarkan id
SELECT * FROM anak WHERE id_anak = 1;

-- Ambil data dari tabel rencana_makanan berdasarkan anak dan tanggal
SELECT * FROM rencana_makanan WHERE id_anak = 1 AND tanggal = '2024-09-26';

-- Rekomendasi makanan sehat untuk sarapan dengan kalori di bawah 300
SELECT nama_makanan, kalori, kandungan_nutrisi 
FROM menu_makanan 
WHERE jenis_makanan = 'Sarapan' AND kalori < 300;


-- DML
-- Tambah data ke tabel pengguna
INSERT INTO pengguna (nama, email, kata_sandi, no_hp, peran) 
VALUES ('Maya', 'maya@gmail.com', 'password123', '0812345678', 'Ibu');

-- Ubah nomor hp pengguna
UPDATE pengguna SET no_hp = '0812345679' WHERE id_pengguna = 1;

-- Hapus data pengguna
DELETE FROM pengguna WHERE id_pengguna = 1;

-- Tambah data ke tabel anak
INSERT INTO anak (id_pengguna, nama_anak, usia, preferensi_makanan, alergi, kebutuhan_khusus) 
VALUES (1, 'Lily', 6, 'Suka sayur', 'Tidak ada', 'Tidak ada');

-- Ubah preferensi makanan anak
UPDATE anak SET preferensi_makanan = 'Suka buah' WHERE id_anak = 1;

-- Hapus data anak
DELETE FROM anak WHERE id_anak = 1;

-- Tambah data ke tabel rencana_makanan
INSERT INTO rencana_makanan (id_anak, tanggal, waktu_makan, id_menu, catatan) 
VALUES (1, '2024-09-26', 'Sarapan', 2, 'Makanan favorit Lily');

-- Ubah menu makanan di rencana_makanan
UPDATE rencana_makanan SET id_menu = 3 WHERE id_rencana = 1;

-- Hapus data rencana_makanan
DELETE FROM rencana_makanan WHERE id_rencana = 1;

DELIMITER //

-- Stored procedure untuk DDL (Create Tables)
CREATE PROCEDURE createTables()
BEGIN
    -- Membuat tabel pengguna
    CREATE TABLE IF NOT EXISTS pengguna (
        id_pengguna INT AUTO_INCREMENT PRIMARY KEY,
        nama VARCHAR(100) NOT NULL,
        email VARCHAR(100) NOT NULL UNIQUE,
        kata_sandi VARCHAR(100) NOT NULL,
        no_hp VARCHAR(15),
        peran ENUM('Ibu', 'Anak') NOT NULL
    );

    -- Membuat tabel anak
    CREATE TABLE IF NOT EXISTS anak (
        id_anak INT AUTO_INCREMENT PRIMARY KEY,
        id_pengguna INT NOT NULL,
        nama_anak VARCHAR(100) NOT NULL,
        usia INT NOT NULL,
        preferensi_makanan TEXT,
        alergi TEXT,
        kebutuhan_khusus TEXT,
        FOREIGN KEY (id_pengguna) REFERENCES pengguna(id_pengguna) ON DELETE CASCADE
    );

    -- Membuat tabel menu_makanan
    CREATE TABLE IF NOT EXISTS menu_makanan (
        id_menu INT AUTO_INCREMENT PRIMARY KEY,
        nama_makanan VARCHAR(100) NOT NULL,
        kalori INT NOT NULL,
        kandungan_nutrisi TEXT NOT NULL,
        jenis_makanan ENUM('Sarapan', 'Makan Siang', 'Makan Malam', 'Camilan') NOT NULL
    );

    -- Membuat tabel rencana_makanan
    CREATE TABLE IF NOT EXISTS rencana_makanan (
        id_rencana INT AUTO_INCREMENT PRIMARY KEY,
        id_anak INT NOT NULL,
        tanggal DATE NOT NULL,
        waktu_makan ENUM('Sarapan', 'Makan Siang', 'Makan Malam', 'Camilan') NOT NULL,
        id_menu INT NOT NULL,
        catatan TEXT,
        FOREIGN KEY (id_anak) REFERENCES anak(id_anak) ON DELETE CASCADE,
        FOREIGN KEY (id_menu) REFERENCES menu_makanan(id_menu) ON DELETE CASCADE
    );
END //

-- Stored procedure untuk DQL (Select Queries)
CREATE PROCEDURE getPenggunaById(IN penggunaId INT)
BEGIN
    SELECT * FROM pengguna WHERE id_pengguna = penggunaId;
END //

CREATE PROCEDURE getAnakById(IN anakId INT)
BEGIN
    SELECT * FROM anak WHERE id_anak = anakId;
END //

CREATE PROCEDURE getHealthyMenu(IN max_calories INT)
BEGIN
    SELECT nama_makanan, kalori, kandungan_nutrisi 
    FROM menu_makanan 
    WHERE kalori <= max_calories;
END //

-- Stored procedure untuk DML (Insert, Update, Delete)

-- Stored procedure untuk INSERT data ke tabel pengguna
CREATE PROCEDURE insertPengguna(
    IN namaPengguna VARCHAR(100), 
    IN emailPengguna VARCHAR(100), 
    IN kataSandiPengguna VARCHAR(100), 
    IN noHpPengguna VARCHAR(15), 
    IN peranPengguna ENUM('Ibu', 'Anak')
)
BEGIN
    INSERT INTO pengguna (nama, email, kata_sandi, no_hp, peran) 
    VALUES (namaPengguna, emailPengguna, kataSandiPengguna, noHpPengguna, peranPengguna);
END //

-- Stored procedure untuk UPDATE nomor HP pengguna
CREATE PROCEDURE updateNoHpPengguna(
    IN penggunaId INT, 
    IN newNoHp VARCHAR(15)
)
BEGIN
    UPDATE pengguna SET no_hp = newNoHp WHERE id_pengguna = penggunaId;
END //

-- Stored procedure untuk DELETE pengguna
CREATE PROCEDURE deletePengguna(IN penggunaId INT)
BEGIN
    DELETE FROM pengguna WHERE id_pengguna = penggunaId;
END //

-- Stored procedure untuk INSERT data ke tabel anak
CREATE PROCEDURE insertAnak(
    IN penggunaId INT, 
    IN namaAnak VARCHAR(100), 
    IN usiaAnak INT, 
    IN preferensiMakanan TEXT, 
    IN alergiAnak TEXT, 
    IN kebutuhanKhusus TEXT
)
BEGIN
    INSERT INTO anak (id_pengguna, nama_anak, usia, preferensi_makanan, alergi, kebutuhan_khusus) 
    VALUES (penggunaId, namaAnak, usiaAnak, preferensiMakanan, alergiAnak, kebutuhanKhusus);
END //

-- Stored procedure untuk UPDATE preferensi makanan anak
CREATE PROCEDURE updatePreferensiMakananAnak(
    IN anakId INT, 
    IN newPreferensiMakanan TEXT
)
BEGIN
    UPDATE anak SET preferensi_makanan = newPreferensiMakanan WHERE id_anak = anakId;
END //

-- Stored procedure untuk DELETE data anak
CREATE PROCEDURE deleteAnak(IN anakId INT)
BEGIN
    DELETE FROM anak WHERE id_anak = anakId;
END //

DELIMITER ;

-- Insert data ke tabel pengguna
CALL insertPengguna('Maya', 'maya@gmail.com', 'password123', '0812345678', 'Ibu');

-- Update nomor HP pengguna
CALL updateNoHpPengguna(1, '0812345679');

-- Hapus data pengguna
CALL deletePengguna(1);

-- Insert data ke tabel anak
CALL insertAnak(1, 'Lily', 6, 'Suka sayur', 'Tidak ada', 'Tidak ada');

-- Update preferensi makanan anak
CALL updatePreferensiMakananAnak(1, 'Suka buah');

-- Hapus data anak
CALL deleteAnak(1);

